import asyncio

import redis.asyncio as redis
from playwright.async_api import Playwright, async_playwright, BrowserContext, Browser

from crawler.config import settings

# factory function to get log, redis_client
from crawler.deps import get_logger

# 初始化日志器
log = get_logger("next")
log.info(f"日志配置成功, 日志器: {log.name}")
# 初始化redis_client
r = redis.from_url(settings.redis_dsn, decode_responses=True, protocol=3)
log.info("初始化Redis成功")
__doc__ = """
同过sku_id 搜索商品并建立索引和存取到数据库
"""
PLAYWRIGHT_TIMEOUT = settings.playwright.timeout
from fake_useragent import UserAgent

skus = [
    "118530",
    "122920",
    "129376",
    "129396",
    "129428",
    "129472",
    "129475",
    "129488",
    "129531",
    "129713",
    "129726",
    "129746",
    "129808",
    "129847",
    "129866",
    "129879",
    "129988",
    "130070",
    "130081",
    "130148",
    "130252",
    "130257",
    "130265",
    "130411",
    "130467",
    "130491",
    "130511",
    "130515",
    "130557",
    "130580",
    "130601",
    "130947",
    "130964",
    "130978",
    "130979",
    "130991",
    "131013",
    "131024",
    "131033",
    "131113",
    "131117",
    "131138",
    "131140",
    "131242",
    "131273",
    "131277",
    "131310",
    "131352",
    "131375",
    "131399",
    "131515",
    "131527",
    "131588",
    "131635",
    "131644",
    "131645",
    "131666",
    "131685",
    "131692",
    "131695",
    "131699",
    "131708",
    "131716",
    "131735",
    "131737",
    "131742",
    "131748",
    "131760",
    "131781",
    "131828",
    "131874",
    "131910",
    "132225",
    "132227",
    "132249",
    "132269",
    "132270",
    "132293",
    "132345",
    "132509",
    "132521",
    "132545",
    "132561",
    "132590",
    "132653",
    "163253",
    "172550",
    "174260",
    "174280",
    "174284",
    "174321",
    "174338",
    "174401",
    "195983",
    "334793",
    "335768",
    "377656",
    "378010",
    "378087",
    "378099",
    "420333",
    "420363",
    "503672",
    "504068",
    "531433",
    "563178",
    "563190",
    "607986",
    "669139",
    "708669",
    "708786",
    "754818",
    "755781",
    "813327",
    "813358",
    "813490",
    "813552",
    "815492",
    "815525",
    "815590",
    "815669",
    "815697",
    "815762",
    "822488",
    "823112",
    "866320",
    "911432",
    "911440",
    "911442",
    "921411",
    "974533",
    "999427",
    "999431",
    "999442",
    "999604",
    "8D9272",
    "A11493",
    "A14364",
    "A14365",
    "B01321",
    "B01322",
    "B01598",
    "B01982",
    "B02100",
    "B02778",
    "B05086",
    "B05312",
    "B05400",
    "B05708",
    "B06214",
    "B11189",
    "B12343",
    "B12714",
    "B14432",
    "B14554",
    "B14746",
    "B15092",
    "B15218",
    "B15438",
    "B15479",
    "B15787",
    "B17141",
    "B17743",
    "B17918",
    "B20723",
    "B20808",
    "B21191",
    "B21644",
    "B21892",
    "B22345",
    "B22377",
    "B22799",
    "B22949",
    "B23251",
    "B23718",
    "B23944",
    "B24088",
    "B24239",
    "B24399",
    "B24566",
    "B24698",
    "B24802",
    "B25123",
    "B25224",
    "B25627",
    "B26665",
    "B27961",
    "B29645",
    "B30240",
    "B30944",
    "B34377",
    "B34453",
    "B34599",
    "B34692",
    "B34895",
    "B35120",
    "B35124",
    "B36009",
    "B36904",
    "B37383",
    "B37562",
    "B37912",
    "B38505",
    "B38597",
    "B38821",
    "B39731",
    "B40569",
    "B40582",
    "B40710",
    "B40713",
    "B41438",
    "B41908",
    "B43677",
    "B43980",
    "B44694",
    "B45057",
    "B45650",
    "B45762",
    "B45781",
    "B45847",
    "B46941",
    "B46990",
    "B47363",
    "B47589",
    "B47818",
    "B49532",
    "B50094",
    "B50111",
    "B50330",
    "B50805",
    "B51721",
    "B52018",
    "B52151",
    "B53187",
    "B53202",
    "B53404",
    "B54389",
    "B55280",
    "B55695",
    "B56220",
    "B57379",
    "B57643",
    "B57915",
    "B58224",
    "B58494",
    "B58501",
    "B58742",
    "B58883",
    "B59205",
    "B59355",
    "B60505",
    "B60542",
    "B61493",
    "B61540",
    "B62055",
    "B62930",
    "B63095",
    "B63287",
    "B64869",
    "B65146",
    "B65661",
    "B65688",
    "B65802",
    "B65808",
    "B66101",
    "B66292",
    "B66549",
    "B67145",
    "B67506",
    "B67515",
    "B67679",
    "B69243",
    "B69534",
    "B69734",
    "B70760",
    "B70817",
    "B72247",
    "B72810",
    "B72832",
    "B73367",
    "B73565",
    "B73766",
    "B73973",
    "B74048",
    "B74532",
    "B75460",
    "B77241",
    "B77360",
    "B77561",
    "B77682",
    "B79304",
    "B79607",
    "B80042",
    "B80317",
    "B80499",
    "B80849",
    "B81397",
    "B81401",
    "B81779",
    "B82076",
    "B82370",
    "B82508",
    "B82745",
    "B82828",
    "B84415",
    "B84451",
    "B85456",
    "B85484",
    "B86309",
    "B87288",
    "B87418",
    "B88252",
    "B88386",
    "B88710",
    "B88738",
    "B89827",
    "B90512",
    "B90705",
    "B90813",
    "B91059",
    "B91080",
    "B91899",
    "B92076",
    "B92301",
    "B92566",
    "B92845",
    "B93384",
    "B93652",
    "B95189",
    "B95882",
    "B96379",
    "B97428",
    "B98115",
    "C41124",
    "D43462",
    "D81098",
    "D88593",
    "E00514",
    "E00521",
    "E00525",
    "E00527",
    "E00653",
    "E00654",
    "E00941",
    "E01521",
    "E02418",
    "E02422",
    "E02423",
    "E02425",
    "E10445",
    "E10446",
    "E10449",
    "E12159",
    "E12160",
    "E12161",
    "E12163",
    "E14090",
    "E14230",
    "E14238",
    "E14239",
    "E14715",
    "E14890",
    "E14891",
    "E14892",
    "E14893",
    "E15127",
    "E15128",
    "E15134",
    "E15141",
    "E16465",
    "E16468",
    "E16475",
    "E16478",
    "E16830",
    "E16831",
    "E16832",
    "E16868",
    "E17116",
    "E17519",
    "E22839",
    "E22841",
    "E22928",
    "E22932",
    "E23560",
    "E23565",
    "E23568",
    "E23569",
    "E23570",
    "E23830",
    "E23831",
    "E23832",
    "E23833",
    "E23834",
    "E23835",
    "E23836",
    "E23838",
    "E23840",
    "E23841",
    "E23842",
    "E25381",
    "E25385",
    "E27457",
    "E27460",
    "E27461",
    "E27462",
    "E27463",
    "E27465",
    "E27466",
    "E27509",
    "E27841",
    "E27967",
    "E29945",
    "E32706",
    "E32707",
    "E34390",
    "E35866",
    "E35867",
    "E35868",
    "E36783",
    "E36784",
    "E36787",
    "E51644",
    "E51646",
    "E53996",
    "E65937",
    "E66907",
    "E68071",
    "E74815",
    "E74818",
    "E74819",
    "E74820",
    "E74821",
    "E79299",
    "E79301",
    "E82066",
    "E83897",
    "E94255",
    "K72481",
    "K72600",
    "K72601",
    "K84088",
    "K84092",
    "K87986",
    "K88004",
    "K88007",
    "K88008",
    "K88042",
    "K88246",
    "K91334",
    "K91343",
    "K93006",
    "K93007",
    "K93009",
    "N00134",
    "N04293",
    "N23800",
    "N23830",
    "N23835",
    "N23838",
    "N23840",
    "N23842",
    "N23843",
    "N23852",
    "N23855",
    "N23860",
    "N23863",
    "N23874",
    "N25486",
    "N25487",
    "N25952",
    "N25992",
    "N25997",
    "N25998",
    "N26002",
    "N26007",
    "N26023",
    "N26024",
    "N26026",
    "N26027",
    "N26176",
    "N26184",
    "N27066",
    "N27069",
    "N27771",
    "N27776",
    "N27780",
    "N27782",
    "N27783",
    "N27785",
    "N27786",
    "N27788",
    "N28438",
    "N58650",
    "N64949",
    "N64950",
    "N70101",
    "N77100",
    "N77119",
    "N77123",
    "N77124",
    "N77141",
    "N77144",
    "N77148",
    "N77732",
    "N77734",
    "N77792",
    "N77794",
    "N77795",
    "N77796",
    "N77797",
    "N77798",
    "N77799",
    "N77801",
    "N77805",
    "N77814",
    "N77821",
    "N77824",
    "N77825",
    "N77838",
    "N77839",
    "N77840",
    "N77845",
    "N77846",
    "N77848",
    "N77849",
    "N77850",
    "N77851",
    "N77852",
    "N77860",
    "N77866",
    "N77868",
    "N77869",
    "N77872",
    "N77873",
    "N77876",
    "N78162",
    "N78164",
    "N78184",
    "N78186",
    "N78191",
    "N78403",
    "N78909",
    "N78916",
    "N98107",
    "N98300",
    "N98301",
    "N98303",
    "N98310",
    "N98312",
    "N98313",
    "N98314",
    "N98343",
    "N99078",
    "N99084",
    "N99095",
    "N99096",
    "N99550",
    "N99555",
    "N99558",
    "N99564",
    "N99565",
    "N99585",
    "N99591",
    "N99592",
    "N99593",
    "Q61762",
    "Q63153",
    "Q73818",
    "Q96696",
    "Q96763",
    "T97127",
    "T97129",
    "U12534",
    "U19270",
]  # noqa

PLAYWRIGHT_HEADLESS = settings.playwright.headless
PLAYWRIGHT_HEADLESS = False
settings.save_login_state = True


async def run(playwright: Playwright) -> None:
    # 从playwright对象中获取chromium浏览器
    chromium = playwright.chromium
    user_data_dir = settings.user_data_dir
    proxy = {
        "server": settings.proxy_pool.server,
        "username": settings.proxy_pool.username,
        "password": settings.proxy_pool.password,
    }
    proxy = None
    if settings.save_login_state:
        context = await playwright.chromium.launch_persistent_context(
            user_data_dir,
            headless=PLAYWRIGHT_HEADLESS,
            proxy=proxy,
            # headless=False,
            # slow_mo=50,  # 每个操作的延迟时间（毫秒），便于调试
            # args=["--start-maximized"],  # 启动时最大化窗口
            # ignore_https_errors=True,  # 忽略HTTPS错误
            # devtools=True,
        )
    else:
        pass
        browser = await chromium.launch(
            headless=PLAYWRIGHT_HEADLESS,
            # devtools=True,
            proxy=proxy,
        )
        ua = UserAgent(browsers=["chrome", "safari", "edge"], os=["win", "mac", "linux"], platforms=["pc"])
        user_agent = ua.random
        context = await browser.new_context(user_agent=user_agent)

    # 设置全局超时
    context.set_default_timeout(PLAYWRIGHT_TIMEOUT)

    semaphore = asyncio.Semaphore(1)
    product_urls = []

    for sku in skus:
        status = await r.get(f"next_customer:0707:{sku}")
        log.info(f"{sku=}索引状态: {status}")
        if status not in ("done"):
            log.info(f"{sku=}索引状态: {status}, 开始抓取")
            result = await get_product_urls(context=context, sku=sku)
            if result:
                product_urls.append(product_urls)
                await r.sadd("next_customer:product_urls", result)
                await r.set(f"next_customer:0707:{sku}", "done")
                log.info(f"将{sku=}放入redis, 标记成功")
            else:
                await r.set(f"next_customer:0707:{sku}", "failed")
                log.info(f"将{sku=}放入redis, 标记失败")

        else:
            log.info(f"{sku=}已抓取, 无需再抓取")

    print(f"{product_urls=}")
    await context.close()


async def get_product_urls(
        *,
        browser: Browser | None = None,
        context: BrowserContext | None = None,
        sku: str | None = None,
):
    if browser:
        ua = UserAgent(browsers=["chrome", "safari", "edge"], os=["win", "mac", "linux"], platforms=["pc"])
        user_agent = ua.random
        context = await browser.new_context(user_agent=user_agent)
        page = await context.new_page()
    else:
        page = await context.new_page()
    async with page:
        # await page.route(
        #     "**/*",
        #     lambda route: route.abort() if route.request.resource_type == "image" else route.continue_(),
        # )
        # await page.goto("https://www.next.co.uk/")
        log.debug(f"搜索款号: {sku}")
        # await page.get_by_test_id("header-search-bar-text-input").fill(sku)
        # await page.get_by_test_id("header-search-bar-button").click()
        await page.goto(f"https://www.next.co.uk/search?w={sku}")

        # await page.wait_for_load_state("domcontentloaded")
        print(page.url)
        if "/style/" in page.url:
            log.info(f"获取到商品链接: {page.url}")
            return page.url

        else:
            log.warning(f"未找到商品链接: {page.url}")
            return None


async def main():
    async with async_playwright() as p:
        await run(p)


if __name__ == "__main__":
    asyncio.run(main())
